## External defined functions
source ~/bin/bash_git_prompt.sh
source ~/bin/bash_gpush_pop.sh
# source ~/bin/bash_remote_jupyter.sh
source ~/bin/bash_complete_alias.sh
# Autojump must be sourced here if you want to use it in subshells also (f.e. 
# when launching a subshell from ranger)
source /etc/profile.d/autojump.bash #Arch

if command -v rbenv 1>/dev/null 2>&1; then
  eval "$(rbenv init -)"
fi

if command -v pyenv 1>/dev/null 2>&1; then
  # basic pyenv command
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
  # for pyenv virtualenv, https://github.com/pyenv/pyenv-virtualenv
  eval "$(pyenv virtualenv-init -)"
fi

# for thefuck
eval $(thefuck --alias)

## To prevent nested ranger instances
ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        PYTHONOPTIMIZE=1 TERM=xterm-kitty /usr/bin/ranger "$@"
    else
        exit
    fi
}

testregex() {
  [ "$#" -eq 1 ] || return 1
  while IFS= read -r line; do
    printf '%s\n' "$1" | grep -Eoe "$line"
  done
}

# Function for always using one (and only one) vim server, even when not
# using gvim.
# If you really want a new vim session, simply do not pass any
# argument to this function.
function vims {
  vim_orig=$(command -v vim)
  if [ -z "$vim_orig" ]; then
    echo "$SHELL: vim: command not found"
    return 127
  fi
  # If there is already a vimserver, use it
  if $vim_orig --serverlist | grep -q VIM; then
    if [ $# -eq 0 ]; then
      # unless no args were given
      $vim_orig
    else
      $vim_orig --remote "$@"
    fi
  else
    $vim_orig --servername vim "$@"
  fi
}
# sourcing this file will define a bash functions that 
# tries to run subsequent calls to emacs with 24 bit color.
#
# Checks if there is an xterm-direct, either globally or in the user defined directory) 
# and, if so, check if truecolor is enabled
#
# To check how many colors emacs thinks it can display, run M-x list-colors-display
emacs () {
    if ( test -f "$HOME/.terminfo/x/xterm-direct" || test -f "/usr/share/terminfo/x/xterm-direct" ) && test "$COLORTERM" == "truecolor"
    then
        TERM=xterm-direct command emacs "$@"
    else
        command emacs "$@"
    fi
}
emacsclient () {
    if ( test -f "$HOME/.terminfo/x/xterm-direct" || test -f "/usr/share/terminfo/x/xterm-direct" ) && test "$COLORTERM" == "truecolor"
    then
        TERM=xterm-direct command emacsclient "$@"
    else
        command emacsclient "$@"
    fi
}
# FOOT, extrapolated from foot wiki
osc7_cwd() {
    local strlen=${#PWD}
    local encoded=""
    local pos c o
    for (( pos=0; pos<strlen; pos++ )); do
        c=${PWD:$pos:1}
        case "$c" in
            [-/:_.!\'\(\)~[:alnum:]] ) o="${c}" ;;
            * ) printf -v o '%%%02X' "'${c}" ;;
        esac
        encoded+="${o}"
    done
    printf '\e]7;file://%s%s\e\\' "${HOSTNAME}" "${encoded}"
}
PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }osc7_cwd
prompt_marker() {
    printf '\e]133;A\e\\'
}
PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }prompt_marker
