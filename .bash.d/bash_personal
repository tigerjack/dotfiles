# Shopt various
# append to the history file, don't overwrite it
shopt -s histappend
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize
# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Eternal bash history.
# ---------------------
# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history
# To erase duplicates from history
#export HISTCONTROL=erasedups
# Ignore commands starting with space
HISTCONTROL=ignorespace
# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ;} history -a"

## To color less, man, etc
# The following line is to highliht syntax
# make less more friendly for non-text input files, see lesspipe(1).
# This export LESSOPEN and LESSCLOSE
[ -x /usr/bin/lesspipe.sh ] && eval "$(SHELL=/bin/sh lesspipe.sh)" #ARCH
#export LESSOPEN="| /usr/bin/src-hilite-lesspipe.sh %s" #UBUNTU
export LESSOPEN="| /usr/bin/lesspipe.sh %s"
export LESS="--RAW-CONTROL-CHARS"
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\E[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'
## export LESS_TERMCAP_mr=$(tput rev)
## export LESS_TERMCAP_mh=$(tput dim)
## export LESS_TERMCAP_ZV=$(tput rsubm)
## export LESS_TERMCAP_ZO=$(tput ssupm)
## export LESS_TERMCAP_ZW=$(tput rsupm)
## export LESS_TERMCAP_mb=$(tput bold; tput setaf 2) # green
## export LESS_TERMCAP_md=$(tput bold; tput setaf 6) # cyan
## export LESS_TERMCAP_me=$(tput sgr0)
## export LESS_TERMCAP_so=$(tput bold; tput setaf 3; tput setab 4) # yellow on blue
## export LESS_TERMCAP_se=$(tput rmso; tput sgr0)
## export LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 7) # white
## export LESS_TERMCAP_ue=$(tput rmul; tput sgr0)
## export LESS_TERMCAP_mr=$(tput rev)
## export LESS_TERMCAP_mh=$(tput dim)
## export LESS_TERMCAP_ZN=$(tput ssubm)
## export LESS_TERMCAP_ZV=$(tput rsubm)
## export LESS_TERMCAP_ZO=$(tput ssupm)
## export LESS_TERMCAP_ZW=$(tput rsupm)
## export GROFF_NO_SGR=1         # For Konsole and Gnome-terminal


## To use solarized dircolors for ls
eval `dircolors ~/.config/dircolors.ansi-dark`

# Set the default editor
export EDITOR="vim"
# ... and my personal editor2
#export EDITOR2="emacsclient -cn"
export EDITOR2="emacsclient -t"

# To start emacs in daemon mode automatically
export ALTERNATE_EDITOR=""
#export EDITOR=emacsclient

# Default browser
export BROWSER="firefox"

# Go src, bin, pkg directories.
# WARN: I put the dir inside .local, where also user python stores its bin, lib, share dirs.
export GOPATH="$HOME/.local"
# Export path (N.B. already exported at a system level at /etc/profile)
[ "${PATH#*$GOPATH/bin:}" == "$PATH" ] && export PATH="$PATH:$GOPATH/bin"

# Autojump must be sourced here if you want to use it in subshells also (f.e. 
# when launching a subshell from ranger)
. /etc/profile.d/autojump.bash #Arch
#. /usr/share/autojump/autojump.sh #Ubuntu

# Bash coloring
GREEN="\[$(tput setaf 2)\]"
BLUE="\[$(tput setaf 6)\]"
RESET="\[$(tput sgr0)\]"

export PS1="${GREEN}\u@\h:\W${BLUE}"'$(__git_ps1 "(%s)")'"${GREEN}>${RESET}"

# GPG variables
GPG_TTY=$(tty)
export GPG_TTY

# To override vimrc default location
# Set vimrc's location and source it on vim startup
export VIMINIT='let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'

# Export also bins in opt and home
[ "${PATH#*/opt/simone/bin:}" == "$PATH" ] && export PATH="$PATH:/opt/simone/bin"
[ "${PATH#*$HOME/bin:}" == "$PATH" ] && export PATH="$PATH:$HOME/bin"
[ "${PATH#*$HOME/bin/x/:}" == "$PATH" ] && export PATH="$PATH:$HOME/bin/x"
[ "${PATH#*$HOME/.local/bin:}" == "$PATH" ] && export PATH="$PATH:$HOME/.local/bin"

# Set matlab to use the userpath folder (first run userpath('dir_name') inside matlab
export MATLAB_USE_USERWORK=1
# Set matlab log directory
export MATLAB_LOG_DIR="$MDIR_LOGS/matlab"

# Jupyter
JUPYTER_CONFIG_DIR="$XDG_CONFIG_HOME/jupyter"
# Anaconda
[ "${PATH#*/opt/anaconda/bin:}" == "$PATH" ] && export PATH="$PATH:/opt/anaconda/bin"

# For helm-gtags
export GTAGSLABEL=pygments 

# Some git exports
export GIT_PROG_MGMT_OPTS="--git-dir=$MDIR_PROGRAMMING_DATA/.git_prog_mgmt/ --work-tree=$MDIR_PROGRAMMING_DATA"
export GIT_DOTFILES_MGMT_OPTS="--git-dir=$HOME/.dot_git/ --work-tree=$HOME"
# Format options not working
export GIT_LOG_OPTS="--graph --abbrev-commit --decorate --all"

# npm config dir
export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm"
export NPM_CONFIG_CACHE="$XDG_CACHE_HOME/npm"

# https://github.com/chubin/cheat.sh
# export CHEATSH="curl cht.sh"
#https://github.com/omgimanerd/getnews.tech
export GETNEWS="curl getnews.tech"

# for dialog
export DIALOGRC="$HOME/dialog/dialogrc"

# for i3-sensible-terminal
#export TERMINAL=termite
export TERMINAL='termite'
# for ranger
export TERMCMD='termite'

# for locale
# export LC_ALL=en_US.UTF-8

# for task warrior
export TASKRC="$HOME/.config/taskwarrior/taskrc"

# for thefuck
eval $(thefuck --alias)

# python-virtualenvwrapper
export WORKON_HOME="$MDIR_LINUX_DATA/virtualenvs"
export PROJECT_HOME="$MDIR_LINUX_DATA/projects"
#source /usr/bin/virtualenvwrapper_lazy.sh
# use pyenv-virtualenvwrapper instead, source and instructions at 
# https://github.com/pyenv/pyenv-virtualenvwrapper
# see following lines

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
#export PYENV_VIRTUALENV_DISABLE_PROMPT=1
if command -v pyenv 1>/dev/null 2>&1; then
  # basic pyenv command
  eval "$(pyenv init -)"
  # for pyenv virtualenv, https://github.com/pyenv/pyenv-virtualenv
  eval "$(pyenv virtualenv-init -)"
  # for pyenv virtualenvwrapper, https://github.com/pyenv/pyenv-virtualenvwrapper
  pyenv virtualenvwrapper_lazy
fi

# opam configuration
test -r "$HOME/.opam/opam-init/init.sh" && . "$HOME/.opam/opam-init/init.sh" > /dev/null 2> /dev/null || true

# It seems to be only used by texdoc
#export PDFVIEWER=zathura
